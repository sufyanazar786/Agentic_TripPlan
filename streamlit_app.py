# import streamlit as st
# import requests
# import datetime

# # from exception.exceptions import TradingBotException
# import sys

# BASE_URL = "https://agentic-tripplan.onrender.com"  # Backend endpoint

# st.set_page_config(
#     page_title="üåç Travel Planner Agentic Application",
#     page_icon="üåç",
#     layout="centered",
#     initial_sidebar_state="expanded",
# )

# st.title("üåç Travel Planner Agentic Application")

# # Initialize chat history
# if "messages" not in st.session_state:
#     st.session_state.messages = []

# # Display chat history
# st.header("How can I help you in planning a trip? Let me know where do you want to visit.")

# # Chat input box at bottom
# with st.form(key="query_form", clear_on_submit=True):
#     user_input = st.text_input("User Input", placeholder="e.g. Plan a trip to Goa for 5 days")
#     submit_button = st.form_submit_button("Send")

# if submit_button and user_input.strip():
#     try:
#         # # Show user message
#         # Show thinking spinner while backend processes
#         with st.spinner("Bot is thinking..."):
#             payload = {"question": user_input}
#             response = requests.post(f"{BASE_URL}/query", json=payload)

#         if response.status_code == 200:
#             answer = response.json().get("answer", "No answer returned.")
#             markdown_content = f"""# üåç AI Travel Plan

#             # **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
#             # **Created by:** Sufyans's Travel Agent

#             ---

#             {answer}

#             ---

#             *This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
#             """
#             st.markdown(markdown_content)
#         else:
#             st.error(" Bot failed to respond: " + response.text)

#     except Exception as e:

#         raise f"The response failed due to {e}" 



import streamlit as st
import requests
import datetime
import os
import html
from typing import List

# ---------- Configuration ----------

BASE_URL =  "https://agentic-tripplan.onrender.com"  # Backend endpoint
API_TIMEOUT = 120  # seconds

# ---------- Page setup ----------
st.set_page_config(
    page_title="Agentic Trip Planner",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state="expanded",
)

# custom CSS for modern look & chat bubbles
st.markdown(
    """
    <style>
    :root{
      --bg:#0f172a;
      --card:#0b1220;
      --muted:#94a3b8;
      --accent:#06b6d4;
      --glass: rgba(255,255,255,0.03);
    }
    .page {
      padding: 1.5rem 1rem;
      background: linear-gradient(180deg, rgba(15,23,42,1) 0%, rgba(8,10,20,1) 100%);
      color: #e6eef8;
      font-family: Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
    }
    .hero {
      display: flex; gap: 1rem; align-items:center;
    }
    .brand {
      background: linear-gradient(135deg,#06b6d4,#34d399);
      padding: 10px; border-radius:12px;
      box-shadow: 0 6px 24px rgba(6,182,212,0.12);
      width:56px;height:56px; display:flex;align-items:center;justify-content:center;
    }
    .brand h1{ margin:0; font-size:18px;}
    .card { background: linear-gradient(180deg, rgba(255,255,255,0.03), rgba(255,255,255,0.02)); padding:1rem; border-radius:14px; border: 1px solid rgba(255,255,255,0.03);}
    .sidebar-title { font-size:14px; font-weight:600; margin-bottom:6px; color: #cfeffc;}
    .sample-btn { background: transparent; border: 1px dashed rgba(255,255,255,0.05); padding:8px 10px; border-radius:10px; color:var(--muted); }
    .chip { display:inline-block; margin:4px; padding:6px 10px; border-radius:999px; background:rgba(255,255,255,0.02); color:var(--muted); font-size:13px;}
    .chat-window { background: linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01)); padding:12px; border-radius:12px; height:60vh; overflow:auto; }
    .msg { max-width:78%; padding:10px 14px; border-radius:12px; margin-bottom:10px; white-space:pre-wrap; }
    .user { margin-left:auto; background: linear-gradient(90deg,#ecfccb,#bbf7d0); color:#042018; border-bottom-right-radius:4px; }
    .assistant { margin-right:auto; background: rgba(255,255,255,0.02); border:1px solid rgba(255,255,255,0.03); color:#e6eef8; }
    .meta { font-size:11px; color:var(--muted); margin-top:6px; }
    .footer-input { display:flex; gap:8px; align-items:center; padding-top:8px; }
    .btn-primary { background: linear-gradient(90deg,#06b6d4,#3b82f6); color:white; border:none; padding:10px 14px; border-radius:10px; font-weight:600;}
    .btn-ghost { background: transparent; color:var(--muted); border:1px solid rgba(255,255,255,0.03); padding:8px 10px; border-radius:10px;}
    .small { font-size:12px; color:var(--muted); }
    </style>
    """,
    unsafe_allow_html=True,
)

# ---------- Helper utilities ----------
def now_str():
    return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def append_message(role: str, text: str):
    st.session_state.messages.append({"role": role, "text": text, "time": now_str()})

def reset_chat():
    st.session_state.messages = []

def build_prompt(user_text: str, tone: str, days:int, budget: str, style: str, extras: List[str]) -> str:
    extras_text = ", ".join(extras) if extras else "none"
    # Good, clear prompt wrapper to make backend behavior deterministic
    system = (
        f"You're an expert travel planner. Tone: {tone}. Travel style: {style}. "
        f"Days: {days}. Budget: {budget}. Preferences: {extras_text}.\n\n"
        "Create a clear day-by-day itinerary with bullet points, suggested activities, approximate expense estimates, "
        "and weather-aware packing notes. Return the plan as readable markdown.\n\n"
    )
    return system + f"User request: {user_text}"

# ---------- Initialize session state ----------
if "messages" not in st.session_state:
    st.session_state.messages = []
if "last_user" not in st.session_state:
    st.session_state.last_user = ""

# ---------- Layout: Sidebar (controls) ----------
with st.sidebar:
    st.markdown("<div class='card'><div class='sidebar-title'>Agentic Trip Planner</div></div>", unsafe_allow_html=True)
    st.markdown("---")
    st.markdown("**Demo controls**")
    tone = st.selectbox("Tone", ["Professional", "Casual", "Friendly", "Concise"], index=0)
    style = st.selectbox("Travel style", ["Balanced", "Budget", "Luxury", "Adventure", "Relaxed"], index=0)
    days = st.slider("Trip length (days)", 1, 14, value=3)
    budget = st.text_input("Budget (e.g. ‚Çπ20000 or $300)", placeholder="Optional")
    extras = st.multiselect("Preferences / extras", ["Beaches","Museums","Hiking","Food","Nightlife","Family-friendly"])
    st.markdown("---")
    st.markdown("**Quick prompts**")
    sample_prompts = [
        "Plan a 4-day beach-focused trip to Goa for two on a ‚Çπ25,000 budget.",
        "Create a family-friendly 5-day itinerary for Bangalore to Ooty in December.",
        "Cheap 3-day city break in Delhi including food recommendations.",
    ]
    cols = st.columns(1)
    for p in sample_prompts:
        if st.button(p, key=f"sample_{p[:8]}"):
            st.session_state.user_input = p
    st.markdown("---")
    st.markdown("**Actions**")
    if st.button("Clear chat"):
        reset_chat()
    if st.button("Regenerate last response"):
        # will be handled in main area via flag
        st.session_state.regenerate = True
    st.markdown("<div class='small'>Backend</div>", unsafe_allow_html=True)
    st.write(f"<div class='small'>{html.escape(BASE_URL)}</div>", unsafe_allow_html=True)
    st.markdown("---")
    st.markdown("<div class='small'>Tip: Set BACKEND_URL in Streamlit secrets or env for deployed demo.</div>", unsafe_allow_html=True)

# ---------- Main content ----------
st.markdown("<div class='page'>", unsafe_allow_html=True)
col1, col2 = st.columns([1.2, 2.8])

with col1:
    st.markdown("<div class='hero'><div class='brand'>üåç</div><div><h2 style='margin:0'>Agentic Trip Planner</h2><div style='color:#93c5fd;'>AI-powered itineraries ‚Ä¢ Weather-aware ‚Ä¢ Budget-savvy</div></div></div>", unsafe_allow_html=True)
    st.markdown("<br/>", unsafe_allow_html=True)
    st.markdown("<div class='card'><h4 style='margin:0 0 8px 0'>How it works</h4><ul style='margin:0 0 0 18px;color:#cfeffc;'><li>Type any travel request</li><li>Choose tone & constraints</li><li>Download or copy the plan</li></ul></div>", unsafe_allow_html=True)
    st.markdown("<br/>", unsafe_allow_html=True)
    # last plan preview / download
    if st.session_state.messages:
        last_assistant = next((m for m in reversed(st.session_state.messages) if m["role"]=="assistant"), None)
        if last_assistant:
            st.markdown("<div class='card'><b>Last Plan Preview</b></div>", unsafe_allow_html=True)
            st.markdown(f"**Generated:** {last_assistant['time']}", unsafe_allow_html=True)
            st.markdown(f"<div class='small' style='margin-top:8px'>{html.escape(last_assistant['text'][:400])}...</div>", unsafe_allow_html=True)
            if st.download_button("Download last plan (MD)", data=last_assistant["text"], file_name="trip_plan.md", mime="text/markdown"):
                st.success("Downloaded ‚ú®")

with col2:
    st.markdown("<div class='card'><div style='display:flex;justify-content:space-between;align-items:center'><div><strong>Chat with the Trip Planner</strong></div><div class='small'>Fast, weather-aware plans</div></div></div>", unsafe_allow_html=True)
    st.markdown("<div class='chat-window' id='chat-window'>", unsafe_allow_html=True)

    # Render messages
    for msg in st.session_state.messages:
        role = msg["role"]
        text = msg["text"]
        time = msg["time"]
        if role == "user":
            st.markdown(f"<div class='msg user'><div>{html.escape(text)}</div><div class='meta'>{time}</div></div>", unsafe_allow_html=True)
        else:
            # assistant may return markdown - show it as markdown but inside styled bubble
            assistant_html = f"<div class='msg assistant'>{st.markdown(msg['text'], unsafe_allow_html=False) if False else html.escape(msg['text']).replace('\\n','<br>')}</div>"
            # We can't mix markdown inside the bubble easily; so show bubble then formatted markdown below
            st.markdown(f"<div class='msg assistant'>{html.escape(msg['text']).replace('\\n','<br>')}</div>", unsafe_allow_html=True)
            st.markdown(f"<div class='meta'>{time}</div>", unsafe_allow_html=True)

    st.markdown("</div>", unsafe_allow_html=True)

    # Input area
    st.markdown("<div class='card' style='margin-top:12px'>", unsafe_allow_html=True)
    # Use session_state user_input to allow sample buttons to populate
    user_input = st.text_input("Ask me to plan your trip", key="user_input", placeholder="e.g. Plan a 5-day Goa trip with beaches and budget ‚Çπ20k")
    col_send, col_extra = st.columns([1,3])
    with col_send:
        send_btn = st.button("Send", key="send", help="Send to the agent")
    with col_extra:
        regenerate = st.button("‚ü≥ Regenerate", key="regen")
        copy_btn = st.button("Copy last plan", key="copy")
        download_btn = st.button("Download conversation", key="dl")

    st.markdown("</div>", unsafe_allow_html=True)

    # Actions for copy/download/regenerate
    if download_btn:
        md = "\n\n".join([f"**{m['role'].upper()}** ({m['time']}):\n\n{m['text']}" for m in st.session_state.messages])
        st.download_button("Click to download conversation (.md)", data=md, file_name="trip_conversation.md", mime="text/markdown")

    if copy_btn:
        # Put last assistant text into a small text area for easy copy
        last_assistant = next((m for m in reversed(st.session_state.messages) if m["role"]=="assistant"), None)
        if last_assistant:
            st.text_area("Last assistant output (select & copy)", value=last_assistant["text"], height=200)
        else:
            st.info("No assistant response to copy yet.")

    # Handle send/regenerate
    def call_backend_and_append(full_prompt: str):
        try:
            # show disabled UI via st.empty spinner
            with st.spinner("Bot is thinking... (this may take up to 60s)"):
                r = requests.post(f"{BASE_URL}/query", json={"question": full_prompt}, timeout=API_TIMEOUT)
            if r.status_code == 200:
                # Backend is expected to return {"answer": "..."}
                data = r.json()
                if isinstance(data, dict) and "answer" in data:
                    ans = data["answer"]
                else:
                    # Fallback - try to stringify
                    ans = str(data)
                append_message("assistant", ans)
            else:
                append_message("assistant", f"Bot failed to respond: {r.status_code} {r.text}")
        except Exception as e:
            append_message("assistant", f"Request error: {str(e)}")

    if send_btn and user_input.strip():
        st.session_state.last_user = user_input.strip()
        append_message("user", user_input.strip())
        full_prompt = build_prompt(user_input.strip(), tone=tone, days=days, budget=budget or "no budget", style=style, extras=extras)
        call_backend_and_append(full_prompt)
        # clear input field
        st.session_state.user_input = ""

    if regenerate or st.session_state.get("regenerate", False):
        # regenerate last user message
        last_u = st.session_state.last_user or (next((m['text'] for m in reversed(st.session_state.messages) if m['role']=='user'), None))
        if last_u:
            append_message("user", last_u)
            full_prompt = build_prompt(last_u, tone=tone, days=days, budget=budget or "no budget", style=style, extras=extras)
            call_backend_and_append(full_prompt)
        else:
            st.info("No previous user message to regenerate.")
        st.session_state.regenerate = False

st.markdown("</div>", unsafe_allow_html=True)


