import streamlit as st
import requests
import datetime

# from exception.exceptions import TradingBotException
import sys

BASE_URL = "https://agentic-tripplan.onrender.com"  # Backend endpoint

st.set_page_config(
    page_title="üåç Travel Planner Agentic Application",
    page_icon="üåç",
    layout="centered",
    initial_sidebar_state="expanded",
)
st.markdown(
    """
    <style>
    body, .stApp {
        background-color: #0a0a0a;
        color: #e6eef8;
    }
    .stTextInput>div>div>input {
        background-color: #1e293b !important;
        color: #e6eef8 !important;
    }
    .stButton>button {
        background-color: #06b6d4 !important;
        color: #000 !important;
        font-weight: 600;
        border-radius: 6px;
        padding: 6px 12px;
    }
    .stButton>button:hover {
        background-color: #3b82f6 !important;
        color: #000 !important;
    }
    </style>
    """,
    unsafe_allow_html=True
)
st.title("üåç Travel Planner Agentic Application")

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# Display chat history
st.header("How can I help you in planning a trip? Let me know where do you want to visit.")

# Chat input box at bottom
with st.form(key="query_form", clear_on_submit=True):
    user_input = st.text_input("User Input", placeholder="e.g. Plan a trip to Goa for 5 days")
    submit_button = st.form_submit_button("Send")

if submit_button and user_input.strip():
    try:
        # # Show user message
        # Show thinking spinner while backend processes
        with st.spinner("Bot is thinking..."):
            payload = {"question": user_input}
            response = requests.post(f"{BASE_URL}/query", json=payload)

        if response.status_code == 200:
            answer = response.json().get("answer", "No answer returned.")
            markdown_content = f"""# üåç AI Travel Plan

            # **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
            # **Created by:** Sufyans's Travel Agent

            ---

            {answer}

            ---

            *This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
            """
            st.markdown(markdown_content)
        else:
            st.error(" Bot failed to respond: " + response.text)

    except Exception as e:

        raise f"The response failed due to {e}" 



# import streamlit as st
# import requests
# import datetime

# BASE_URL = "https://agentic-tripplan.onrender.com"  # Backend endpoint

# st.set_page_config(
#     page_title="Travel Planner Agentic Application",
#     page_icon="üåç",
#     layout="centered",
#     initial_sidebar_state="expanded",
# )

# # ---------- Dark theme CSS ----------
# st.markdown(
#     """
#     <style>
#     body, .stApp {
#         background-color: #0a0a0a;
#         color: #e6eef8;
#         font-family: 'Inter', sans-serif;
#     }

#     /* Input box */
#     .stTextInput>div>div>input {
#         background-color: #1e293b !important;
#         color: #e6eef8 !important;
#         border-radius: 8px;
#         padding: 8px;
#         border: 1px solid #3b4252;
#     }
#     .stTextInput>div>div>input:focus {
#         border: 1px solid #06b6d4 !important;
#         box-shadow: 0 0 6px #06b6d4;
#     }

#     /* Buttons */
#     .stButton>button {
#         background-color: #000000 !important;  /* Cyan background */
#         color: #06b6d4 !important;            /* Black text */
#         border-radius: 8px;
#         font-weight: 600;
#         padding: 8px 16px;
#         border: none;
#         cursor: pointer;
#     }
#     .stButton>button:hover {
#         background-color: #3b82f6 !important; /* Lighter cyan on hover */
#         color: #000000 !important;             /* Keep text black */
#     }


#     /* Sidebar headers/buttons */
#     .css-1d391kg, .css-1r6slb0 { 
#         color: #e6eef8 !important; 
#     }
#     .css-1emrehy.e16nr0p33 { /* Sidebar buttons hover */
#         background-color: #1e293b !important;
#         color: #06b6d4 !important;
#     }

#     /* Markdown styling */
#     h1, h2, h3, h4, h5, h6, p, strong {
#         color: #e6eef8;
#     }
#     .stMarkdown p {
#         color: #e6eef8;
#     }
#     .stMarkdown h1, .stMarkdown h2, .stMarkdown h3 {
#         color: #cfeffc;
#     }

#     /* Streamlit menu & top bar icons */
#     [data-testid="stDecoration"] svg, 
#     [data-testid="stHorizontalBlock"] svg {
#         fill: #e6eef8 !important;
#     }
#     </style>
#     """,
#     unsafe_allow_html=True
# )

# # ---------- Main UI ----------
# st.title("üåç Travel Planner Agentic Application")

# # Initialize chat history
# if "messages" not in st.session_state:
#     st.session_state.messages = []

# st.header("How can I help you in planning a trip? Let me know where do you want to visit.")

# with st.form(key="query_form", clear_on_submit=True):
#     user_input = st.text_input("User Input", placeholder="e.g. Plan a trip to Goa for 5 days")
#     submit_button = st.form_submit_button("Send")

# if submit_button and user_input.strip():
#     try:
#         with st.spinner("Bot is thinking..."):
#             payload = {"question": user_input}
#             response = requests.post(f"{BASE_URL}/query", json=payload)

#         if response.status_code == 200:
#             answer = response.json().get("answer", "No answer returned.")
#             markdown_content = f"""# üåç AI Travel Plan

# # **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
# # **Created by:** Sufyans's Travel Agent

# ---

# {answer}

# ---

# *This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
# """
#             st.markdown(markdown_content)
#         else:
#             st.error(" Bot failed to respond: " + response.text)

#     except Exception as e:
#         raise f"The response failed due to {e}"






