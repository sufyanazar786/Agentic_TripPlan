# import streamlit as st
# import requests
# import datetime

# # from exception.exceptions import TradingBotException
# import sys

# BASE_URL = "https://agentic-tripplan.onrender.com"  # Backend endpoint

# st.set_page_config(
#     page_title="Travel Planner Agentic Application",
#     page_icon="🌍",
#     layout="centered",
#     initial_sidebar_state="expanded",
# )

# st.title("Travel Planner Agentic Application")

# # Initialize chat history
# if "messages" not in st.session_state:
#     st.session_state.messages = []

# # Display chat history
# st.header("How can I help you in planning a trip? Let me know where do you want to visit.")

# # Chat input box at bottom
# with st.form(key="query_form", clear_on_submit=True):
#     user_input = st.text_input("User Input", placeholder="e.g. Plan a trip to Goa for 5 days")
#     submit_button = st.form_submit_button("Send")

# if submit_button and user_input.strip():
#     try:
#         # # Show user message
#         # Show thinking spinner while backend processes
#         with st.spinner("Bot is thinking..."):
#             payload = {"question": user_input}
#             response = requests.post(f"{BASE_URL}/query", json=payload)

#         if response.status_code == 200:
#             answer = response.json().get("answer", "No answer returned.")
#             markdown_content = f"""# 🌍 AI Travel Plan

#             # **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
#             # **Created by:** Sufyans's Travel Agent

#             ---

#             {answer}

#             ---

#             *This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
#             """
#             st.markdown(markdown_content)
#         else:
#             st.error(" Bot failed to respond: " + response.text)

#     except Exception as e:

#         raise f"The response failed due to {e}" 



import streamlit as st
import requests
import datetime

BASE_URL = "https://agentic-tripplan.onrender.com"  # Backend endpoint

# --- Page Config ---
st.set_page_config(
    page_title="🌍 Travel Planner Agentic Application",
    page_icon="🌍",
    layout="centered",
    initial_sidebar_state="expanded",
)

# --- Custom CSS for Dark Theme ---
st.markdown(
    """
    <style>
    /* Global dark background */
    .stApp {
        background-color: #0f172a;
        color: #e2e8f0;
        font-family: 'Segoe UI', sans-serif;
    }

    /* Title */
    h1, h2, h3, h4 {
        color: #38bdf8;
        font-weight: 700;
    }

    /* Input box */
    .stTextInput>div>div>input {
        background-color: #1e293b;
        color: #e2e8f0;
        border-radius: 6px;
        border: 1px solid #334155;
        padding: 8px;
    }

    /* Buttons */
    .stButton>button {
        background-color: #06b6d4 !important;
        color: #000 !important;
        font-weight: 600;
        border-radius: 6px;
        padding: 8px 16px;
        border: none;
        transition: 0.3s;
    }
    .stButton>button:hover {
        background-color: #3b82f6 !important;
        color: #fff !important;
    }

    /* Markdown content box */
    .reportview-container .markdown-text-container {
        background-color: #1e293b;
        padding: 16px;
        border-radius: 8px;
        border: 1px solid #334155;
        margin-top: 16px;
    }

    /* Spinner text */
    .stSpinner > div {
        color: #38bdf8;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# --- Title ---
st.title("🌍 Travel Planner Agentic Application")
st.caption("Your AI-powered assistant for creating smart, personalized travel itineraries ✈️")

# --- Chat Section ---
st.subheader("💬 How can I help you in planning a trip?")
st.write("Tell me your destination, duration, or preferences and I’ll generate a plan for you.")

# --- Input Form ---
with st.form(key="query_form", clear_on_submit=True):
    user_input = st.text_input(
        "✍️ Enter your request",
        placeholder="e.g. Plan a trip to Goa for 5 days"
    )
    submit_button = st.form_submit_button("🚀 Generate Plan")

# --- Handle Submission ---
if submit_button and user_input.strip():
    try:
        with st.spinner("🤖 Bot is thinking..."):
            payload = {"question": user_input}
            response = requests.post(f"{BASE_URL}/query", json=payload)

        if response.status_code == 200:
            answer = response.json().get("answer", "No answer returned.")
            markdown_content = f"""
            ## 🌍 AI Travel Plan

            **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
            **Created by:** Sufyan's Travel Agent  

            ---

            {answer}

            ---

            ⚠️ *This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
            """
            st.markdown(markdown_content, unsafe_allow_html=True)
        else:
            st.error("❌ Bot failed to respond: " + response.text)

    except Exception as e:
        st.error(f"The response failed due to: {e}")
