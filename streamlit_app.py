# import streamlit as st
# import requests
# import datetime

# # from exception.exceptions import TradingBotException
# import sys

# BASE_URL = "https://agentic-tripplan.onrender.com"  # Backend endpoint

# st.set_page_config(
#     page_title="üåç Travel Planner Agentic Application",
#     page_icon="üåç",
#     layout="centered",
#     initial_sidebar_state="expanded",
# )

# st.title("üåç Travel Planner Agentic Application")

# # Initialize chat history
# if "messages" not in st.session_state:
#     st.session_state.messages = []

# # Display chat history
# st.header("How can I help you in planning a trip? Let me know where do you want to visit.")

# # Chat input box at bottom
# with st.form(key="query_form", clear_on_submit=True):
#     user_input = st.text_input("User Input", placeholder="e.g. Plan a trip to Goa for 5 days")
#     submit_button = st.form_submit_button("Send")

# if submit_button and user_input.strip():
#     try:
#         # # Show user message
#         # Show thinking spinner while backend processes
#         with st.spinner("Bot is thinking..."):
#             payload = {"question": user_input}
#             response = requests.post(f"{BASE_URL}/query", json=payload)

#         if response.status_code == 200:
#             answer = response.json().get("answer", "No answer returned.")
#             markdown_content = f"""# üåç AI Travel Plan

#             # **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
#             # **Created by:** Sufyans's Travel Agent

#             ---

#             {answer}

#             ---

#             *This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
#             """
#             st.markdown(markdown_content)
#         else:
#             st.error(" Bot failed to respond: " + response.text)

#     except Exception as e:

#         raise f"The response failed due to {e}" 




import streamlit as st
import requests
import datetime

# ---------- Backend URL ----------
BASE_URL = "https://agentic-tripplan.onrender.com"  # Backend endpoint

# ---------- Page config ----------
st.set_page_config(
    page_title="üåç Travel Planner Agentic Application",
    page_icon="üåç",
    layout="centered",
    initial_sidebar_state="expanded",
)

st.title("üåç Travel Planner Agentic Application")

# ---------- Dark theme CSS ----------
st.markdown(
    """
    <style>
    body {
        background: linear-gradient(180deg,#0f172a,#080a14);
        color: #e6eef8;
        font-family: Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
    }
    h1, h2, h3, h4, h5, h6 {
        color: #cfeffc;
    }
    .stTextInput>div>div>input {
        background-color: #1e293b;
        color: #e6eef8;
        border-radius: 8px;
        padding: 10px;
    }
    .stButton>button {
        background: linear-gradient(90deg,#06b6d4,#3b82f6);
        color: white;
        border: none;
        padding: 10px 16px;
        border-radius: 10px;
        font-weight: 600;
        cursor: pointer;
    }
    .stMarkdown p, .stMarkdown div {
        color: #e6eef8;
    }
    .chat-bubble-user {
        background: linear-gradient(90deg,#06b6d4,#3b82f6);
        color: #0f172a;
        padding: 10px 14px;
        border-radius: 16px 16px 4px 16px;
        margin: 8px 0;
        max-width: 70%;
        margin-left: auto;
        word-wrap: break-word;
    }
    .chat-bubble-assistant {
        background: rgba(255,255,255,0.05);
        border:1px solid rgba(255,255,255,0.1);
        color: #e6eef8;
        padding: 10px 14px;
        border-radius: 16px 16px 16px 4px;
        margin: 8px 0;
        max-width: 70%;
        word-wrap: break-word;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# ---------- Initialize chat history ----------
if "messages" not in st.session_state:
    st.session_state.messages = []

# ---------- Chat input form ----------
with st.form(key="query_form", clear_on_submit=True):
    user_input = st.text_input("User Input", placeholder="e.g. Plan a trip to Goa for 5 days")
    submit_button = st.form_submit_button("Send")

# ---------- Handle submission ----------
if submit_button and user_input.strip():
    try:
        # Show spinner while backend processes
        with st.spinner("Bot is thinking..."):
            payload = {"question": user_input}
            response = requests.post(f"{BASE_URL}/query", json=payload)

        if response.status_code == 200:
            answer = response.json().get("answer", "No answer returned.")
            # Append messages to session state
            st.session_state.messages.append({"role": "user", "text": user_input})
            st.session_state.messages.append({"role": "assistant", "text": answer})
        else:
            st.error(" Bot failed to respond: " + response.text)
    except Exception as e:
        st.error(f"The response failed due to {e}")

# ---------- Display chat history ----------
for msg in st.session_state.messages:
    if msg["role"] == "user":
        st.markdown(f"<div class='chat-bubble-user'>{msg['text']}</div>", unsafe_allow_html=True)
    else:
        st.markdown(f"<div class='chat-bubble-assistant'>{msg['text']}</div>", unsafe_allow_html=True)

# ---------- Footer ----------
st.markdown("---")
st.markdown("*This travel plan was generated by AI. Please verify all information before your trip.*")
